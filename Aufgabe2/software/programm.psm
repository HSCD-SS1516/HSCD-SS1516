
        CONSTANT IO_Port,  00
        CONSTANT LED0,     01
        CONSTANT LED1,     02
        CONSTANT BNT0,     04
        
        CONSTANT COM_Port, 01
        CONSTANT TXD,      01
        CONSTANT RXD,      01

        CONSTANT RAM_A0_Port, 02
        CONSTANT RAM_A1_Port, 03
        CONSTANT RAM_D_Port,  04

        CONSTANT TXDIDLE,  00
        CONSTANT TXDSTART, 01
        CONSTANT TXDWORK,  02
        CONSTANT TXDSTOP,  03
        CONSTANT RXDIDLE,  00
        CONSTANT RXDSTART, 01
        CONSTANT RXDWORK,  02

        CONSTANT ASCII0,   30
        CONSTANT ASCII9,   3A        ; '9' + 1
        CONSTANT ASCIIA,   41
        CONSTANT ASCIIZ,   5B        ; 'Z' + 1
        CONSTANT ASCIIa,   61
        CONSTANT ASCIIz,   7B        ; 'z' + 1

        CONSTANT BYTECNT_RXD_ADDR, 00
        CONSTANT BYTECNT_TXD_ADDR, 01
        CONSTANT ADDRH_RXD_ADDR, 02
        CONSTANT ADDRL_RXD_ADDR, 03
        CONSTANT ADDRH_TXD_ADDR, 04
        CONSTANT ADDRL_TXD_ADDR, 05

        CONSTANT BLOCKLEN, 10

; Register Mapping
; alle acht Register s0 bis s7 stehen der ISR zur Verfuegung
        ; Temporary variables
        NAMEREG s0, ADDRL
        NAMEREG s1, ADDRH
        NAMEREG s2, TMP
        NAMEREG s3, IOR
        NAMEREG s4, BYTECNT
        ; BLINK variables
        NAMEREG s5, CNTH
        NAMEREG s6, CNTL
        ; RXD variables
        NAMEREG s7, RXDSTATE
        NAMEREG s8, RXDCNTR
        NAMEREG s9, SAVEDBITS
        NAMEREG sA, READBYTE
        ; TXD variables
        NAMEREG sB, TXDSTATE
        NAMEREG sC, TXDCNTR
        NAMEREG sD, SENTBITS
        NAMEREG sE, SENDBUF
        ; Shared variables
        NAMEREG sF, AVAILABLE_BLOCKS

; alle acht Register s8 bis sF stehen der Main-Funktion zur Verfuegung

; --------------------------------------------------------------------------------------------

        ADDRESS 000
; Hauptfunktion
start:  AND    CNTH, 00   ; Initialisierung der Zaehlers ...
        AND    CNTL, 00   ; in der ISR
        LOAD   ADDRL, 00
        LOAD   ADDRH, 01
        ENABLE INTERRUPT
loop:   ; do nothing
        JUMP loop

; --------------------------------------------------------------------------------------------
 
; Subroutine, die den Zustand des Buttons BTN0 auf die Leuchtdiode LED0 durchschaltet
BNT0LED0:
        INPUT  IOR,  IO_Port ; IO-Port einlesen
        INPUT  TMP,  IO_Port ; IO-Port einlesen
        AND    TMP,  BNT0    ; Zustand von BNT0 ermitteln
        SR0    TMP           ; auf die Position ...
        SR0    TMP           ; ... von LED0 verschieben
        AND    IOR,  LED1    ; Zustand von LED1 ermitteln
        OR     IOR,  TMP     ; LED1 mit BNT0 konkatinieren
        OUTPUT IOR,  IO_Port ; den neuen Wert ueber IO-Port ausgeben 
        RETURN

; --------------------------------------------------------------------------------------------

; Subroutine, die die Leuchtdione LED1 mit ca. 1 Hz blinken laesst
BLINK:  ADD    CNTL, 01      ; den 16-Bit-Zaehler ... 
        ADDCY  CNTH, 00      ; .. inkrementieren
        JUMP   NC,   BLINK0  ; kein Ueberlauf -> exit, sonst
        INPUT  IOR,  IO_Port ; IO-Port einlesen
        XOR    IOR,  LED1    ; LED1 toggeln
        OUTPUT IOR,  IO_Port ; den neuen Wert ueber IO-Port ausgeben 
BLINK0: RETURN

; --------------------------------------------------------------------------------------------

; Subroutine that handles UART data reception
COMM_RECEIVE:
        COMPARE RXDSTATE, RXDSTART
        JUMP Z, RXD_START
        COMPARE RXDSTATE, RXDWORK
        JUMP Z, RXD_WORK
RXD_IDLE:
        INPUT IOR, COM_Port             ; Read data from COM port
        AND IOR, RXD
        COMPARE IOR, 00
        JUMP NZ, RXD_RET
        LOAD RXDSTATE, RXDSTART         ; If data is equal to 0b0 (start bit), go to start state
        LOAD RXDCNTR, 08
        JUMP RXD_RET
RXD_START:
        SUB RXDCNTR, 01
        JUMP NZ, RXD_RET                ; Wait for 8 clock periods
        INPUT IOR, COM_Port             ; Read data from COM port
        AND IOR, RXD
        LOAD RXDSTATE, RXDIDLE          ; If data is different to 0b0 (start bit), return to idle state
        COMPARE IOR, 00
        JUMP NZ, RXD_RET
        LOAD RXDSTATE, RXDWORK          ; If data is equal to 0b0 (start bit), go to work state
        LOAD RXDCNTR, 10
        LOAD SAVEDBITS, 08
        LOAD READBYTE, 00
        ; Set BYTECNT_RXD to 00
        ; BEGIN
        LOAD TMP, BYTECNT_RXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        LOAD TMP, 00
        OUTPUT TMP, RAM_A1_Port
        OUTPUT TMP, RAM_D_Port
        ; END
        JUMP RXD_RET
RXD_WORK:
        SUB RXDCNTR, 01
        JUMP NZ, RXD_RET                ; Wait for 16 clock periods
        LOAD RXDCNTR, 10
        INPUT IOR, COM_Port             ; Read data from COM port
        AND IOR, RXD                    ; Keep only the LSB
        OR READBYTE, IOR                ; Copy read bit into READBYTE's LSB
        RR READBYTE                     ; Rotate READBYTE to the right and put LSB in MSB
        SUB SAVEDBITS, 01
        JUMP NZ, RXD_RET                ; If all 8 bits have been read continue with check
CHAR_CHECK:
        ; If READBYTE is an ASCII number or letter, go to CHAR_VALID.
        ; Otherwise, go to CHAR_INVALID
        COMPARE READBYTE, ASCII0
        JUMP C, CHAR_INVALID
        COMPARE READBYTE, ASCII9
        JUMP C, CHAR_VALID
        COMPARE READBYTE, ASCIIA
        JUMP C, CHAR_INVALID
        COMPARE READBYTE, ASCIIZ
        JUMP C, CHAR_VALID
        COMPARE READBYTE, ASCIIa
        JUMP C, CHAR_INVALID
        COMPARE READBYTE, ASCIIz
        JUMP C, CHAR_VALID
CHAR_INVALID:
        LOAD RXDSTATE, RXDIDLE          ; Go to reception idle state
        JUMP RXD_RET
CHAR_VALID:
        ; TODO: should we expect a start bit for every byte or one for every block?
        ; FIXME: if more than 16 bytes are sent the program sends back all of them, not just 16*n
        LOAD RXDSTATE, RXDIDLE          ; Go to reception idle state
        ; Retrieve BYTECNT_RXD (00..0 & BYTECNT_RXD_ADDR) from RAM into BYTECNT
        ; BEGIN
        LOAD TMP, 00
        OUTPUT TMP, RAM_A1_Port
        LOAD TMP, BYTECNT_RXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        INPUT BYTECNT, RAM_D_Port
        ; END
        ADD BYTECNT, 01                 ; Increment BYTECNT_RXD
        OUTPUT BYTECNT, RAM_D_Port      ; Store BYTECNT_RXD back in RAM
        COMPARE BYTECNT, BLOCKLEN
        JUMP NZ, STORE_CHAR
        ; Tell the TXD process to send one more block
        ADD AVAILABLE_BLOCKS, 01
STORE_CHAR:
        ; Store read byte in RAM and increment current address for RXD
        ; BEGIN
        ;       Load ADDR_RXD (00..0 & ADDR_RXD_ADDR) from RAM
        ;       BEGIN
        LOAD TMP, 00
        OUTPUT TMP, RAM_A1_Port
        LOAD TMP, ADDRH_RXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        INPUT ADDRH, RAM_D_Port
        LOAD TMP, ADDRL_RXD_ADDR
        INPUT ADDRL, RAM_D_Port
        ;       END
        OUTPUT ADDRL, RAM_A0_Port
        OUTPUT ADDRH, RAM_A1_Port
        OUTPUT READBYTE, RAM_D_Port
        ADD ADDRL, 01
        JUMP NC, RXD_RET
        ADD ADDRH, 01
        JUMP NZ, RXD_RET                ; Check for overflow
        ADD ADDRH, 01
        ;       Store ADDR_RXD variables back in RAM
        ;       BEGIN
        LOAD TMP, 00
        OUTPUT TMP, RAM_A1_Port
        LOAD TMP, ADDRH_RXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        OUTPUT ADDRH, RAM_D_Port
        LOAD TMP, ADDRL_RXD_ADDR
        OUTPUT ADDRL, RAM_D_Port
        ;       END
        ; END
RXD_RET:
        RETURN

; --------------------------------------------------------------------------------------------

; Subroutine that handles UART data sending
COMM_SEND:
        COMPARE TXDSTATE, TXDSTART
        JUMP Z, TXD_START
        COMPARE TXDSTATE, TXDWORK
        JUMP Z, TXD_WORK
        COMPARE TXDSTATE, TXDSTOP
        JUMP Z, TXD_STOP
TXD_IDLE:
        LOAD TMP, 01
        OUTPUT TMP, TXD                 ; Output 0b1
        COMPARE AVAILABLE_BLOCKS, 00
        JUMP Z, TXD_RET                 ; If there are no new blocks available stay in TXD_IDLE
        ; Setup TXD process data
        ; BEGIN
        LOAD TXDSTATE, TXDSTART         ; Go to transmission start state
        LOAD TXDCNTR, 10
        ;       Set BYTECNT_TXD to BLOCKLEN
        ;       BEGIN
        LOAD TMP, 00
        OUTPUT TMP, RAM_A1_Port
        LOAD TMP, BYTECNT_TXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        LOAD TMP, BLOCKLEN
        OUTPUT TMP, RAM_D_Port
        ;       END
        ;       Set ADDR_TXD_ADDR (00..0 & BYTECNT_TXD_ADDR) to ADDR_RXD_ADDR
        ;       BEGIN
        LOAD TMP, 00
        OUTPUT TMP, RAM_A1_Port
        LOAD TMP, ADDRH_RXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        INPUT ADDRH, RAM_D_Port
        LOAD TMP, ADDRL_RXD_ADDR
        INPUT ADDRL, RAM_D_Port
        LOAD TMP, ADDRH_TXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        OUTPUT ADDRH, RAM_D_Port
        LOAD TMP, ADDRL_TXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        OUTPUT ADDRL, RAM_D_Port
        ;       END
        ; END
TXD_START:
        LOAD TMP, 00
        OUTPUT TMP, TXD                 ; Output 0b0 (start bit)
        SUB TXDCNTR, 01
        JUMP NZ, TXD_RET                ; Repeat for 16 clock periods
        LOAD TXDCNTR, 10
        LOAD SENTBITS, 08
        ; Retrieve BYTECNT_TXD (00..0 & BYTECNT_TXD_ADDR) from RAM into BYTECNT
        ; BEGIN
        LOAD TMP, 00
        OUTPUT TMP, RAM_A1_Port
        LOAD TMP, BYTECNT_TXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        INPUT BYTECNT, RAM_D_Port
        ; END
        ;       Load address (ADDRH & ADDRL) - BYTECNT_TXD into SENDBUF
        ;       BEGIN
        ;               Load ADDR_TXD (00..0 & ADDR_TXD_ADDR) from RAM
        ;               BEGIN
        LOAD TMP, 00
        OUTPUT TMP, RAM_A1_Port
        LOAD TMP, ADDRH_TXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        INPUT ADDRH, RAM_D_Port
        LOAD TMP, ADDRL_TXD_ADDR
        INPUT ADDRL, RAM_D_Port
        ;               END
        LOAD TMP, ADDRL
        SUB TMP, BYTECNT
        OUTPUT TMP, RAM_A0_Port
        OUTPUT ADDRH, RAM_A1_Port
        JUMP NC, LOAD_CHAR
        LOAD TMP, ADDRH
        SUB TMP, 01
        OUTPUT TMP, RAM_A1_Port
        ;       END
LOAD_CHAR:
        INPUT SENDBUF, RAM_D_Port
        ; END
        LOAD TXDSTATE, TXDWORK          ; Go to work state
TXD_WORK:
        OUTPUT SENDBUF, TXD             ; Write SENDBUF into TXD register
        SUB TXDCNTR, 01
        JUMP NZ, TXD_RET                ; Repeat for 16 clock periods
        SR0 SENDBUF                     ; Rotate SENDBUF to the right (send from LSB to MSB)
        LOAD TXDCNTR, 10
        SUB SENTBITS, 01                ; Repeat all above for each bit in SENDBUF
        JUMP Z, TXD_WORK_CHANGESTATE
        JUMP TXD_RET
TXD_WORK_CHANGESTATE:
        LOAD TXDSTATE, TXDSTOP          ; If all 8 bits have been sent, go to stop state
        JUMP TXD_RET
TXD_STOP:
        LOAD TMP, 01
        OUTPUT TMP, TXD                 ; Output 0b1 (stop bit)
        SUB TXDCNTR, 01
        JUMP NZ, TXD_RET                ; Repeat for 16 clock periods
        LOAD TXDCNTR, 10
        ; Increment BYTECNT_TXD
        ; BEGIN
        ;       Load BYTECNT_TXD (00..0 & BYTECNT_TXD_ADDR) from RAM into BYTECNT
        ;       BEGIN
        LOAD TMP, 00
        OUTPUT TMP, RAM_A1_Port
        LOAD TMP, BYTECNT_TXD_ADDR
        OUTPUT TMP, RAM_A0_Port
        INPUT BYTECNT, RAM_D_Port
        ;       END
        SUB BYTECNT, 01                 ; Decrement BYTECNT_TXD
        OUTPUT BYTECNT, RAM_D_Port      ; Store BYTECNT_TXD back in RAM
        ; END
        ; If BYTECNT_TXD < BLOCKLEN, remain in start state
        LOAD TXDSTATE, TXDSTART
        JUMP NZ, TXD_RET
        LOAD TXDSTATE, TXDIDLE
        SUB AVAILABLE_BLOCKS, 01
TXD_RET:
        RETURN

; --------------------------------------------------------------------------------------------
        
        ADDRESS 300
; Interrupt-Service-Routine
ISR:    CALL    BNT0LED0
        CALL    BLINK
        CALL    COMM_RECEIVE
        CALL    COMM_SEND
        RETURNI ENABLE

; --------------------------------------------------------------------------------------------

; Interrupt-Vektor
        ADDRESS 3FF
        JUMP ISR
